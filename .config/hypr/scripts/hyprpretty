PREV_STATE_FILE=~/.config/hypr/prev_state

function ChoosePretty {
    choices=$'pretty\nfloating-bar\nrectangular\ncontrast\nminimal\nindependant'

    selection=$(echo "$choices" | rofi -dmenu)

    set_state "$selection"
}


function SetAnimations {
    style=$1
    case "$style" in
        "vertical")
            hyprctl --batch "\
            keyword animations:enabled true;\
            keyword animation workspaces,1,2,default,slidefadevert"
            ;;
        "horizontal")
            hyprctl --batch "\
            keyword animations:enabled true;\
            keyword animation workspaces,1,2,default,slidefade"
            ;;
        "fade")
            hyprctl --batch "\
            keyword animations:enabled true;\
            keyword animation workspaces,1,2,default,fade"
            ;;
        "none")
            hyprctl "keyword animations:enabled false"
            ;;
    esac
}

function SetGaps {
    size=$1
    case "$size" in
        "large")
            hyprctl --batch "\
            keyword general:gaps_out 16;\
            keyword general:gaps_in 8;\
            keyword general:border_size 8;"
            ;;
        "small")
            hyprctl --batch "\
            keyword general:gaps_out 4;\
            keyword general:gaps_in 2;\
            keyword general:border_size 6;"
            ;;
        "none")
            hyprctl --batch "\
			keyword general:gaps_in 0;\
			keyword general:gaps_out 0;\
            keyword general:border_size 4;"
            ;;
    esac
}

function SetDimming {
    enabled=$1
    if ! $enabled; then
        hyprctl --batch "\
        keyword decoration:dim_inactive false;\
        keyword decoration:inactive_opacity 1.0"
        return
    fi

    strength=$2
    hyprctl --batch "\
    keyword decoration:dim_inactive true;\
    keyword decoration:inactive_opacity $strength"
}

function SetRounding {
    enabled=$1
    if $enabled; then
		hyprctl "keyword decoration:rounding 6"
    else
		hyprctl "keyword decoration:rounding 0"
    fi
}

function SetBorderColorOverride {
    color=$1

    override="$(cat ~/.cache/wal/colors-hyprland.conf | grep $color | awk '{print $3}')"
    hyprctl "keyword general:col.active_border $override"
}

function SetWaybar {
    killall waybar
    config=$1
	waybar --config ~/.config/waybar/$config/config.json --style ~/.config/waybar/$config/style.css &
}

set_state () {
	case $1 in
		pretty)
            SetAnimations horizontal
            SetRounding true
            SetGaps small
            #SetDimming true 0.85
            SetDimming false 1
            SetBorderColorOverride color1

            SetWaybar pretty
            echo $1 > $PREV_STATE_FILE
			;;
		floating-bar)
            SetAnimations horizontal
            SetRounding true
            SetGaps small
            SetDimming false
            SetBorderColorOverride color1

            SetWaybar floating-bar
            echo $1 > $PREV_STATE_FILE
			;;
		minimal)
            SetAnimations none
            SetRounding false
            SetGaps none
            SetDimming false
            SetBorderColorOverride color1

            SetWaybar minimal
            echo $1 > $PREV_STATE_FILE
			;;
    	rectangular)
            SetAnimations none
            SetRounding false
            SetGaps small
            SetDimming false
            SetBorderColorOverride color1

            SetWaybar rectangular
            echo $1 > $PREV_STATE_FILE
            ;;
		contrast)
            SetAnimations horizontal
            SetRounding false
            SetGaps small
            SetDimming false
            SetBorderColorOverride colorForeground

            SetWaybar contrast
            echo $1 > $PREV_STATE_FILE
			;;
        independant)
            # SetAnimations fade
            SetAnimations vertical
            SetRounding true
            SetGaps small
            SetDimming false
            SetBorderColorOverride color1

            SetWaybar independant
            echo $1 > $PREV_STATE_FILE
			;;
	esac
}

restore_previous () {
  prev_state=$(cat $PREV_STATE_FILE)
  set_state $prev_state
}

# if no args then restore
if [ -z "$1" ]; then
  restore_previous
  exit
fi

for arg in $@; do
    case $arg in
        --choose)
            ChoosePretty
            shift
            ;;
        --string)
            shift
            arg=$1
            set_state $arg
            ;;
    esac
done
