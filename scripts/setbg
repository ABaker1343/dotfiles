#!/bin/bash

PrintUsage() {
echo "setbg script for setting wallpaper and colorscheme

Example usage
    setbg -s 0.8 -t monokai -f path/to/wallpaper.png

Options:
    -f, --file         set the file to use as your wallpaper
    -t, --theme        set a pywal theme to use instead of a generated theme from the wallpaper
    -s, --saturation   set the saturation for the colorscheme
    -b, --backend      set the backend used by pywal to generate colorscheme
    -c, --color        set the background to a solid color
    --no-theme         do not generate a new colorscheme
    --help             print this help message

Dependancies:
    pywal (python-pywal)
    swagbg
    pywal-extender (see https://github.com/ABaker1343/dotfiles/scripts/pywal-extender)
"
}

SetWallpaper() {
    wallpaper_path=~/Wallpapers/active_wallpaper.png

    filepath=$1

    # make sure wallpaper gets encoded as png
    ffmpeg -nostdin -i $filepath $wallpaper_path -y
    echo "new wallpaper: $filepath"

    # if hyprpaper is running then use that otherwise use sway
    hyprpaper_pid="$(pidof hyprpaper)"
    if [ "$hyprpaper_pid" != "" ]; then 
        # load the wallpaper in hyprpaper and unload old one
        hyprctl hyprpaper unload "$wallpaper_path" > /dev/null
        hyprctl hyprpaper preload "$wallpaper_path" > /dev/null

        # set the wallpaper on every monitor
        for monitor in $(hyprctl monitors | grep Monitor | awk '{ print $2 }'); do
            hyprctl hyprpaper wallpaper "$monitor,$wallpaper_path"
        done
    else # use sway
	swaymsg "output * background ~/Wallpaper/active_wallpaper.png fill"
    fi
}

SetTheme() {
    backend="wal"

    theme=$1
    
    # set the colorscheme with pywal
    if [ "$theme" == "" ]; then
    	wal -n -i $file --saturate $saturation --backend $backend
    else
    	wal -n --theme "$theme" --saturate $saturation --backend $backend
    fi

    # run extension for programs not included with pywal
    pywal-extender
}

# Logic

saturation=0.6
file=""
bgColor=""
theme=""
setTheme=true
bgsetter=hyprpaper

for arg in $@; do
    case $arg in
        -f | --file)
            shift
            file=$1
            echo "file from -f $file"
            shift
            ;;
        -s | --saturation)
            shift
            saturation=$1
            shift
            ;;
        -c | --color)
            shift
            bgColor=$1
            shift
            ;;
        -t | --theme)
            shift
            theme=$1
            shift
            ;;
        -b | --backend)
            shift
            backend=$1
            shift
            ;;
        -h | --help)
            printUsage
            exit 0
            ;;
        --no-theme)
            shift
            setTheme=false
            ;;
    esac
done

if [ $# == 1 ]; then
    file=$1
fi

if [ -z "$file" ]; then
    echo "No file Specified (use -f or --file)"
    if [ -z "$theme" ]; then
	echo "No theme Specified (use -t or --theme)"
	exit 1
    fi
fi

# set wallpaper
if [ "$file" != "" ]; then
    SetWallpaper $file
else
    echo "not file specified"
fi

# set colorscheme
if [ "$setTheme" == "true" ]; then
    SetTheme $theme
fi

if [ -n "$(type -p spicetify)"]; then
    ~/.spicetify/spicetify apply
fi

# restart any desktop elements that are using the colorscheme
waybar_pid=$"(pidof waybar)"
if [ "$waybar_pid" != "" ]; then 
    killall waybar
    nohup waybar > /dev/null &
fi

echo "finished setting wallpaper and colorscheme\n"

